<?php

namespace Alsharie\AdenBankPayment;


use Alsharie\AdenBankPayment\Helpers\AdenBankAuthHelper;
use Alsharie\JawaliPayment\Helpers\JawaliAuthHelper;

class AdenBankAttributes extends Guzzle
{

    /**
     * Store request attributes.
     */
    protected array $attributes = [];

    protected array $headers = [];
    protected array $security = [];
    protected array $temp = [];

    public function disableVerify()
    {
        $this->security['verify'] = false;
        return $this;
    }


    /** refNo is a Customer purchase basket Unique ID , generated by merchant
     * @param $refNo
     * @return AdenBankAttributes
     */
    public function setRefNo($refNo): AdenBankAttributes
    {
        $this->attributes['refNo'] = $refNo;
        return $this;
    }

    /**
     * Bank's unique transaction ID. generated by bank
     * @param $BankRef
     * @return $this
     */
    public function setBankRef($BankRef): AdenBankAttributes
    {
        $this->attributes['BankRef'] = $BankRef;
        return $this;
    }

    /** msgID is a Unique number in each request
     * if not set it will be generated by the current time
     * @param $msgID
     * @return AdenBankAttributes
     */
    public function setMsgID($msgID): AdenBankAttributes
    {
        $this->attributes['msgID'] = $msgID;
        return $this;
    }

    /**
     * set customer phone (cifNo)
     * @param $phone
     * @return AdenBankAttributes
     */
    public function setCustomerPhone($phone): AdenBankAttributes
    {
        $this->attributes['cifNo'] = $phone;
        return $this;
    }


    /**
     * @param $amount
     * @return AdenBankAttributes
     */
    public function setAmount($amount): AdenBankAttributes
    {
        $this->attributes['amount'] = $amount;
        return $this;
    }


    /**
     * set currencyId in source & beneficiary & amountcurrency
     * 2 = rial Yemeni
     * @param int $currency
     * @return AdenBankAttributes
     */
    public function setCurrency(string $currency = 'YER'): AdenBankAttributes
    {
        $this->attributes['currency'] = $currency;
        return $this;
    }


    /**
     * @param $note
     * @return AdenBankAttributes
     */
    public function setNote($note): AdenBankAttributes
    {
        $this->attributes['notes'] = $note;
        return $this;
    }


    /**
     * itâ€™s 6 digit and unique we sent it to customer phone via SMS
     * when you use purchase request API.
     * @param $otp
     * @return AdenBankAttributes
     */
    public function setOtp($otp): AdenBankAttributes
    {
        $this->attributes['otp'] = $otp;
        return $this;
    }


    /**
     * @param array $attributes
     * @return AdenBankAttributes
     */
    public function setAttributes(array $attributes): AdenBankAttributes
    {
        $this->attributes = $attributes;
        return $this;
    }

    /**
     * @param array $attributes
     *
     * @return AdenBankAttributes
     */
    public function mergeAttributes(array $attributes): AdenBankAttributes
    {
        $this->attributes = array_merge($this->attributes, $attributes);
        return $this;
    }

    /**
     * @param mixed $key
     * @param mixed $value
     *
     * @return AdenBankAttributes
     */
    public function setAttribute($key, $value): AdenBankAttributes
    {
        $this->attributes[$key] = $value;
        return $this;
    }

    /**
     * @param mixed $key
     *
     * @return boolean
     */
    public function hasAttribute($key): bool
    {
        return isset($this->attributes[$key]);
    }

    /**
     * @param mixed $key
     *
     * @return AdenBankAttributes
     */
    public function removeAttribute($key): AdenBankAttributes
    {
        $this->attributes = array_filter($this->attributes, function ($name) use ($key) {
            return $name !== $key;
        }, ARRAY_FILTER_USE_KEY);

        return $this;
    }


    /**
     * @return void
     */
    protected function setAuthAttributes()
    {
        //check if msgID is in the attributes and is not empty
        if (!isset($this->attributes['msgID']) || empty($this->attributes['msgID'])) {
            // generate a msgID from the current time
            $this->attributes['msgID'] = time();
        }
        $this->attributes['username'] = config('adenBank.auth.username');
        // password id User's hash_MD5(msgID+ username + password)
        $this->attributes['password'] = md5($this->attributes['msgID'] . $this->attributes['username'] . config('adenBank.auth.password'));
    }


    /**
     * @return void
     */
    protected function setAuthorization()
    {
        //check if msgID is in the attributes and is not empty
        if (!isset($this->attributes['msgID']) || empty($this->attributes['msgID'])) {
            // generate a msgID from the current time
            $this->attributes['msgID'] = time();
        }
        $this->headers['Authorization'] = 'bearer ' . AdenBankAuthHelper::getAuthToken();
    }


    protected function generateMerchantToken()
    {
        $this->attributes['MrchntToken'] = md5($this->attributes['msgID'] . $this->attributes['username'] . config('adenBank.auth.password') . $this->attributes['refNo']);

    }

}